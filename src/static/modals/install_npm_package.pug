script.
    const ProgressBar = require('progressbar.js');
    const fs = require('fs');
    const spawn = require('child_process').spawn;
    const {
        app, dialog
    } = require('electron').remote;
    const getRepoName = require('get-repository-url');

    var barSize = 0;

    var bars = [];
    var retry = [];

    $(document).ready(() => {

        $('.install-widget-table').click(function() {
            var name = $(this).closest('tr').find('.result-name').html();
            installWidget(name);
        });

        bgTables();
        buildContextMenu();

        function addProgressBar(name) {
            if(bars[name] && !retry[name]) return;
            if(retry[name]) {
                var bar = bars[name];
                var log = $(bar.getContainer()).closest('.barlog-container').find('.bar-log');
                log.html('Retrying...');
                delete retry[name];
                return bar;
            }
            var container = $(`<div class='barlog-container'></div>`);
            var bar = $(`<div class='progress-bar' id='progress-bar-${barSize++}'></div>`)

            var log = $(`<p class='bar-log'></div>`);
            log.html('Installing...');

            container.append(bar);
            container.append(log);

            $('#install-bars').append(container);

            bar = new ProgressBar.Line('#progress-bar-'+(barSize-1), {
                strokeWidth: 4,
                easing: 'easeInOut',
                duration: 1400,
                color: '#FFEA82',
                trailColor: '#eee',
                trailWidth: 1,
                svgStyle: {
                    width: '240px',
                    height: '10px',
                    'border-radius': '5px'
                }
            });
            bars[name] = bar;
            return bar;
        }

        function installWidget(name, location=null) {
            var bar = addProgressBar(name);
            if(!bar) return;
            var log = $(bar.getContainer()).closest('.barlog-container').find('.bar-log');
            bar.animate(0.03);
            if(!location)
                location = app.getPath('userData')+'\\widgets\\'+name;
            else
                location = location+'\\'+name;
            setMessage(log, `Checking location: `+location);
            if(fs.existsSync(location)) {
                rimraf(location, () => {});
            } else
                fs.mkdirSync(location);
            setMessage(log, 'Installing... This may take a minute.');
            getRepoName(name, (err, url) => {
                if(err) {
                    setMessage(log, 'Error installing widget. Please check your logs.');
                    console.error(err);
                    return;
                }
                var cd = spawn(`git`, [ "clone", url, location, '--progress' ]);
                cd.stderr.on('data', (data) => {
                    //console.error(data.toString());
                    var result = data.toString();
                    if(result.includes('objects')) {
                        if(result.includes('Counting')) {
                            result = result.substring(result.indexOf('ts:')+4);
                            result = result.substring(0, result.indexOf(','));
                            result = result.replace(/\s/g,'');
                            setMessage(log, `Finished counting # of objects: ${result}`);
                        } else if(result.includes('Compressing')) {
                            result = result.substring(result.indexOf('ts:')+4);
                            result = result.substring(0, result.indexOf(','));
                            result = result.replace(/\s/g,'');
                            //bar.animate(result/100);
                            setMessage(log, `Compressing objects: ${result}%`);
                        } else if(result.includes('Receiving')) {
                            var perc = result.substring(result.indexOf('ts:')+4);
                            perc = perc.substring(0, perc.indexOf('%'));
                            perc = perc.replace(/\s/g,'');
                            var speed = result.substring(result.indexOf('|')+1);
                            if(speed.includes(',')) speed = speed.substring(0, speed.indexOf(','));
                            bar.animate(perc/100);
                            setMessage(log, `Receiving objects: ${perc}% ${speed}`)
                        }
                    } else if(result.includes('deltas')) {
                        if(result.includes('Resolving')) {
                            var perc = result.substring(result.indexOf('as:')+4);
                            perc = perc.substring(0, perc.indexOf('%'));
                            perc = perc.replace(/\s/g,'');
                            bar.animate(perc/100);
                            setMessage(log, `Resolving deltas: ${perc}%`)
                        }
                    }
                });
                cd.on('exit', (result) => {
                    if(result == 128) { //directory not empty
                        setMessage(log, 'Directory is not empty!');
                        retry[name] = true;
                        return;
                    } else if(result == 0) {
                        setMessage(log, 'Installing dependenices...');
                        var install = spawn('npm.cmd', [ 'install' ], {
                            cwd: location 
                        })
                        /* install.stdout.on('data', data => console.log(data.toString()));
                        install.stderr.on('data', data => console.error(data.toString())); */
                        install.on('exit', (result) => {
                            if(result == 0) {
                                var elem = $(`tr[data-name=${name}]`).find('.install-widget-table i');
                                elem.removeClass('fa-clipboard');
                                elem.addClass('fa-check col-green');
                                elem.closest('.install-widget-table').css('cursor', 'default');
                                var container = log.closest('.barlog-container');
                                container.remove();
                                var data = {
                                    name,
                                    position: 'first',
                                    config: {}, //get default configValues from package.json
                                    active: false,
                                    location
                                };
                                ui.getWidgets().addWidget(data);
                            }
                        });
                        return;
                    }
                    setMessage(log, 'Installation ended with result: '+result.toString());
                });
            });
        }

        function setMessage(log, message) {
            if(message.length >= 57) {
                log.prop('title', message);
                message = message.substring(0, 57);
                message += '...';
            } else
                log.removeProp('title', '');
            log.html(message);
        }

        function buildContextMenu() {
            context.addMenuItems({
                selector: '.install-widget-table',
                items: [
                    {
                        name: 'Default Folder',
                        icon: 'fa fa-folder',
                        callback: (event, e) => {
                            var target = $(event.target);
                            var name = target.closest('tr').find('.result-name').html();
                            installWidget(name);
                        },
                        css: {
                            cursor: 'pointer'
                        }
                    },
                    {
                        name: 'Custom Folder',
                        icon: 'fa fa-folder',
                        callback: (event, e) => {
                            var target = $(event.target);
                            var name = target.closest('tr').find('.result-name').html();
                            dialog.showOpenDialog(remote.getCurrentWindow(), {
                                title: 'Select location',
                                defaultPath: path.resolve(app.getPath('userData')+'\\widgets'),
                                properties: [
                                    'openDirectory'
                                ]
                            }, (paths) => {
                                if(!paths || paths.length <= 0) return;
                                var _path = paths[0];
                                installWidget(name, _path);
                            })
                        },
                        css: {
                            cursor: 'pointer'
                        }
                    }
                ]
            })
        }

    });
p#install-npm-title Choose which package you wish to install
div.table-container#packages-container
    div.table-header
    div.table
        table
            tr
                th Name
                th Version
                th Install
            for result in results
                tr(data-name=result.name[0])
                    td.result-name= result.name[0]
                    td= result.version[0]
                    td.install-widget-table
                        i.fa.fa-clipboard
    div.table-back
div#install-bars
